<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PRF.Utils.CoreComponents</name>
    </assembly>
    <members>
        <member name="T:PRF.Utils.CoreComponents.Extensions.BitmapExtensions">
            <summary>
            Méthodes d'extensions pour les Bitmap
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.BitmapExtensions.ToGrayScale(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            Convertit l'image en niveaux de gris sans créer de copie.
            L'instance originale est donc écrasée !
            </summary>
            <param name="bmp">Image à convertir</param>
            <param name="redPart">Proportion de rouge (en %)</param>
            <param name="greenPart">Proportion de vert (en %)</param>
            <param name="bluePart">Proportion de bleu (en %)</param>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.BitmapExtensions.ToGrayScale(System.Drawing.Bitmap)">
            <summary>
            Convertit l'image en niveaux de gris sans créer de copie.
            L'instance originale est donc écrasée !
            Répartition des couleurs : R=20%, V=60%, B=20%
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.BitmapExtensions.ToGrayScaleCopy(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            Retourne une copie de l'image en niveaux de gris.
            L'instance originale n'est pas modifiée.
            </summary>
            <param name="bmp">Image à convertir</param>
            <param name="redPart">Proportion de rouge (en %)</param>
            <param name="greenPart">Proportion de vert (en %)</param>
            <param name="bluePart">Proportion de bleu (en %)</param>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.BitmapExtensions.ToGrayScaleCopy(System.Drawing.Bitmap)">
            <summary>
            Retourne une copie de l'image en niveaux de gris.
            L'instance originale n'est pas modifiée.
            Répartition des couleurs : R=20%, V=60%, B=20%
            </summary>
        </member>
        <member name="T:PRF.Utils.CoreComponents.Extensions.DictionaryExtensions">
            <summary>
            Méthodes d'extensions pour les Dictionnaires et Dictionnaires Concurentiels
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.DictionaryExtensions.AddRangeDifferential``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Ajoute les éléments demandés en gérant le différentiel (les éléments manquants sont ajoutés,
             les éléments en trop sont retirés, les autres sont laissés tel quel)
            ATTENTION, on compare les éléments par clé et on remplace les valeurs.
            La comparaison se base sur les égalités des types T1. Il faut donc bien penser à surcharger les opérateurs
            d'égalité pour obtenir un comportement spécifique
            </summary>
            <param name="dictionary">Le dictionnaire où l'on souhaite rajouter des éléments</param>
            <param name="elementsToAdd">la liste des éléments à rajouter</param>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.DictionaryExtensions.AddRangeDifferential``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Ajoute les éléments demandés en gérant le différentiel (les éléments manquants sont ajoutés,
             les éléments en trop sont retirés, les autres sont laissés tel quel)
            ATTENTION, on compare les éléments par clé et on remplace les valeurs.
            La comparaison se base sur les égalités des types T1. Il faut donc bien penser à surcharger les opérateurs
            d'égalité pour obtenir un comportement spécifique
            </summary>
            <param name="dictionary">Le dictionnaire où l'on souhaite rajouter des éléments</param>
            <param name="elementsToAdd">la liste des éléments à rajouter</param>
        </member>
        <member name="T:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension">
            <summary>
            Par défaut, pour les DirectoryInfo et FileInfo, la propriété Exist renvoie si le fichier ou directory existait au moment de la CREATION de l'instance. 
            Ainsi, le Test suivant échoue:
                    var file = new FileInfo(@"C:\ProgramData\...");
                    Assert.IsFalse(file.Exists); // = FALSE
                    file.Create();
                    Assert.IsTrue(file.Exists); // FAIL! => FALSE
            => Il faut faire un Refresh préalable
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.ExistsExplicit``1(``0)">
            <summary>
            Renvoie true si le dossier ou fichier existe vraiment à l'instant de l'appel
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.DeleteIfExist(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Fait un delete si le dossier existe (comportement par défaut SAUF si le chemin n'existe pas lui même)
            </summary>
            <returns>true si on a effacé qqch, false sinon</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.DeleteIfExistAndWaitDeletion(System.IO.DirectoryInfo,System.TimeSpan,System.Boolean)">
            <summary>
            Fait un delete si le dossier existe ET si le dossier existait, on boucle tant
            que le dossier n'est pas réellement supprimé (ou que l'on atteint le timeout)
            </summary>
            <returns>true si on a effacé qqch, false sinon</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.CopyTo(System.IO.DirectoryInfo,System.String,System.Boolean)">
            <summary>
            Fait une copie d'un directoryInfo en copiant tous les sous fichiers et sous dossiers
            </summary>
            <returns>le nouveau dossier cible</returns>
            <param name="fileSystemInfo">le dossier source</param>
            <param name="path">le chemin du dossier cible</param>
            <param name="autoRename">si autoRename = true et si le dossier cible existe, on l'utilise. Sinon, on créer un nouveau dossier avec un ...(2)</param>
            <returns></returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.CopyToWithCheckLenght(System.IO.DirectoryInfo,System.String)">
            <summary>
            Fait une copie d'un directoryInfo en copiant tous les sous fichiers et sous dossiers en vérifiant la longueur du chemin cible
             avant la copie (dans ce cas, un fichier d'erreur est écrit à la racine)
            </summary>
            <returns>le nouveau dossier cible</returns>
            <param name="fileSystemInfo">le dossier source</param>
            <param name="path">le chemin du dossier cible</param>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.AutoRenameDirectoryToAvoidDuplicateWithCreateDirectory(System.String[])">
            <summary>
            Renomme un dossier automatiquement si un dossier du même nom existe déjà et renvoie ce nouveau nom
            => PUIS LE CREER
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.AutoRenameDirectoryToAvoidDuplicate(System.String[])">
            <summary>
            Renomme un dossier automatiquement si un dossier du même nom existe déjà et renvoie ce nouveau nom
            => ATTENTION, NE LE CREER PAS S'IL N'EXISTE PAS
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.IsValidDirectory(System.String)">
            <summary>
            renvoie true si le le string est valide pour un DirectoryInfoe et si le dossier existe vraiment
            </summary>
            <returns></returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.EscapeInvalidPathFromName(System.String)">
            <summary>
            Renvoie une nouvelle string expurgée de tous les charactère invalide qu'elle contenait
            </summary>
            <param name="name">Le nom du fichier ou du dossier à expurger</param>
            <returns>la chaine expurgée</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.ContainsInvalidCharFromName(System.String)">
            <summary>
            Renvoie true si la string contient des charactères invalides
            </summary>
            <param name="name">La string à vérifier</param>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.AutoRenameFileToAvoidDuplicate(System.String[])">
            <summary>
            Renomme un fichier automatiquement si un fichier du même nom existe déjà et renvoie ce nouveau nom
            => ATTENTION, NE LE CREER PAS S'IL N'EXISTE PAS
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.DeleteIfExist(System.IO.FileInfo)">
            <summary>
            Fait un delete si le fichier existe (comportement par défaut SAUF si le chemin n'existe pas lui même)
            </summary>
            <returns>true si on a effacé qqch, false sinon</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.CreateIfNotExist(System.IO.DirectoryInfo)">
            <summary>
            Fait un Create si le dossier n'existe pas (comportement par défaut mais avec un renvoie true/false)
            </summary>
            <returns>true si on a crée qqch, false sinon</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.CreateIfNotExistAndClose(System.IO.FileInfo)">
            <summary>
            Fait un Create si le fichier n'existe pas et ferme le FileStream (comportement par défaut mais avec un renvoie true/false)
            </summary>
            <returns>true si on a crée qqch, false sinon</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.CleanDirectory(System.IO.DirectoryInfo)">
            <summary>
            Nettoie l'intégralité des fichiers/dossiers présents dans le dossier en retirant au passage les attributs ReadOnly
            Si le dossier n'existait pas, le créé
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.CreateDirectoryAndTryClean(System.IO.DirectoryInfo)">
            <summary>
            Créer le dossier s'il n'existait pas et tente de le nettoyer sans préoccupation du résultat
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.IsOldEnought(System.IO.FileInfo,System.TimeSpan)">
            <summary>
            Renvoie true si le fichier a une date de création type "comportement affichage Window" (la plus ancienne entre la date de création et celle de modification)
            plus ancienne ou égale au minimum demandé
            </summary>
            <param name="file">le fichier concerné</param>
            <param name="minimumPeriodBeforeTakingFiles">le minimum de temps demandé</param>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.EstimateSize(System.IO.DirectoryInfo,System.IO.SearchOption)">
            <summary>
            Renvoie une estimation de la taille de tous les fichiers d'un dossier (renvoie -1 en cas d'exception)
            </summary>
            <param name="dir"></param>
            <param name="searchOption">indique si l'on inclus les sous dossier dans ce calcul</param>
            <returns>Une estimation de la taille de tous les fichiers d'un dossier</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.CreateSubdirectoryIfNotExist(System.IO.DirectoryInfo,System.String)">
            <summary>
            Créer le sous dossier dont le nom est fourni et le renvoie. S'il existe déjà, on renvoie simplement le DirectoryInfo correspondant
            (la méthode CreateSubdirectory renvoyant par défaut une IOException si le dossier existe déjà)
            </summary>
            <param name="dir">le directoryInfo parent</param>
            <param name="name">le nom du sous dossier souhaité</param>
            <returns>le sous dossier (existant ou nouvellement crée)</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.CreateFileIfNotExist(System.IO.DirectoryInfo,System.String,System.Boolean)">
            <summary>
            Créer le fichier dont le nom est fourni dans le dossier parent puis le renvoie.
             S'il existe déjà:
             on renvoie simplement le FileInfo correspondant si autoRename = false
             on trouve un nom disponible, on créer le fichier et on le renvoie si autoRename = true
            </summary>
            <param name="dir">le directoryInfo parent</param>
            <param name="name">le nom du fichier souhaité</param>
            <param name="autoRename">on renvoie simplement le FileInfo correspondant si autoRename = false
             on trouve un nom disponible, on créer le fichier et on le renvoie si autoRename = true</param>
            <returns>le fichier (existant ou nouvellement crée)</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.GetRelativePath(System.IO.FileInfo,System.String)">
            <summary>
            Récupère un chemin relatif en supprimant la partie 'pathToRemove' mais en conservant les sous-dossiers qui suivent
            Marche avec ou sans le '\' à la fin de beforeRelativePath
            </summary>
            <param name="file">le fichier</param>
            <param name="pathToRemove">le chemin à supprimer</param>
            <returns>le chemin relatif restant</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.IsEmpty(System.IO.DirectoryInfo)">
            <summary>
            Renvoie true si le dossier est vide, c'est à dire ne contient ni fichiers ni sous-dossiers, même vide
            </summary>
            <param name="dir">le dossier à examiner</param>
            <returns>true si le dossier est vide, false sinon</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.GetFile(System.IO.DirectoryInfo,System.String)">
            <summary>
            Renvoie un FileInfo du fichier dont le nom est fourni s'il existe. sinon, renvoie null
             => Uniquement TopDirectoryOnly
            </summary>
            <param name="dir">le directoryInfo parent</param>
            <param name="name">le nom du fichier souhaité</param>
            <returns>le fichier (existant ou null)</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.GetDirectory(System.IO.DirectoryInfo,System.String)">
            <summary>
            Renvoie un DirectoryInfo du dossier dont le nom est fourni s'il existe. sinon, renvoie null
             => Uniquement TopDirectoryOnly
            </summary>
            <param name="dir">le directoryInfo parent</param>
            <param name="name">le nom du directory souhaité</param>
            <returns>le directoryInfo (existant ou null)</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.AppendTextLine(System.IO.FileInfo,System.String)">
            <summary>
            Ajoute la chaine de caractères passée en paramètre à la fin du fichier suivie d'un retour à la ligne (CR+LF).
            Si le fichier n'existe pas il est créé.
            </summary>
            <param name="file">FileInfo du fichier cible</param>
            <param name="line">Ligne à ajouter</param>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.RemoveReadonlyAttribute(System.IO.FileInfo)">
            <summary>
            Retire l'attribut ReadOnly du fichier
            </summary>
            <param name="file">FileInfo du fichier cible</param>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.TryDelete(System.IO.FileInfo,System.Nullable{System.TimeSpan})">
            <summary>
            Supprime le fichier s'il n'est pas en cours d'utilisation.
            </summary>
            <param name="file">Fichier à supprimer</param>
            <param name="timeout">Durée pendant laquelle on doit effectuer des retentatives. Si null: pas de retentative.</param>
            <returns>True si le fichier a été supprimé avant l'expiration du timeout.</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.GetQuotedPath(System.IO.FileInfo)">
            <summary>
            Retourne le chemin complet du fichier encadré de double quotes.
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.CopyAsync(System.IO.FileInfo,System.String)">
            <summary>
            Copie de façon asynchrone un fichier. Contrairement à la méthode copy de FileInfo,
            cette méthode ne modifie pas le FileInfo mais renvoie le fichier copié en sortie sous forme de FileInfo.
            ATTENTION, si le fichier de destination existe, cette méthode écrase le fichier
            </summary>
            <param name="file">le fichier source à copier</param>
            <param name="destinationPath">la destination (full Name)</param>
            <returns> le fichier de sortie</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.CopyAsync(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
            Copie de façon asynchrone un fichier. Contrairement à la méthode copy de FileInfo,
            cette méthode ne modifie pas le FileInfo mais renvoie le fichier copié en sortie sous forme de FileInfo.
            ATTENTION, si le fichier de destination existe, cette méthode écrase le fichier
            </summary>
            <param name="file">le fichier source à copier</param>
            <param name="destinationFile">le fichier de destination</param>
            <returns> le fichier de sortie</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.FilesAndDirectoryInfoExtension.DeleteAndRetryIfLocked(System.IO.FileInfo)">
            <summary>
            Supprime le fichier avec des retentatives pendant 10s s'il est locké
            </summary>
            <param name="file"></param>
        </member>
        <member name="T:PRF.Utils.CoreComponents.Extensions.IntExtension">
            <summary>
            Classe d'extension pour les types int
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.IntExtension.IsInRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Détermine si la valeur est comprise dans un intervalle donné.
            </summary>
            <param name="i">Valeur</param>
            <param name="minValue">Valeur minimale (incluse)</param>
            <param name="maxValue">Valeur maximale (incluse)</param>
        </member>
        <member name="T:PRF.Utils.CoreComponents.Extensions.LinqExtensions">
            <summary>
            Regroupe les extensions LINQ
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.LinqExtensions.SplitInChunckOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Sépare une liste en N sous-ensembles
            </summary>
            <typeparam name="T">le type de la liste</typeparam>
            <param name="items">la liste à séparer</param>
            <param name="partitionSize">la taille 'N' des sous ensembles</param>
            <returns>la liste de sous ensemble de N éléments (sauf le dernier)</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.LinqExtensions.Next``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Renvoie le prochain élément d'une liste (en reprenant le premier s'il s'agissait du dernier)
            S'il y a moins de deux éléments, on renvoie l'élément actuel
            </summary>
            <typeparam name="T">le type de la liste</typeparam>
            <param name="items">La liste </param>
            <param name="current">l'élément actuel</param>
            <returns>le prochain élément de la liste</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.LinqExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            Génère un hashSet à partir de la liste (attention, s'il y a des doublons ils seront effacés)
            => peut éventuellement servir à filtrer les doublons du coup.
            </summary>
            <typeparam name="T">le type de la liste</typeparam>
            <param name="items">la liste à extraire</param>
            <param name="throwExceptionOnDuplicate">paramètre optionnel qui détermine si l'on lance une exception en cas de 
            doublons dans la liste à extraire</param>
            <returns>le hashSet généré</returns>
        </member>
        <member name="T:PRF.Utils.CoreComponents.Extensions.ListFilteringExtension">
            <summary>
            Module d'extension de filtre de listes
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.ListFilteringExtension.CapRandomized``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            A partir d'une liste de N éléments et un nombre d'éléments cible C où N >= C
            on filtre jusqu'à obtenir le nombre d'éléments voulus dans la liste en tirant au hasard les élément à supprimer
             -> ATTENTION: la liste elle même est filtrée, on n'en renvoie pas une copie
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listToFilter">la liste à filtrer</param>
            <param name="maxItemTarget">le nombre d'élément cible</param>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.ListFilteringExtension.CapRandomized``1(System.Collections.Generic.List{``0},System.Int32,System.Random)">
            <summary>
            A partir d'une liste de N éléments et un nombre d'éléments cible C où N >= C
            on filtre jusqu'à obtenir le nombre d'éléments voulus dans la liste en tirant au hasard les élément à supprimer
             -> ATTENTION: la liste elle même est filtrée, on n'en renvoie pas une copie
            </summary>
            <typeparam name="T"></typeparam>
            <param name="listToFilter">la liste à filtrer</param>
            <param name="maxItemTarget">le nombre d'élément cible</param>
            <param name="random">le seed pour la randomisation (optionnel)</param>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.ListFilteringExtension.GetRandomElement``1(System.Collections.Generic.List{``0},System.Random)">
            <summary>
            Renvoie un élément tiré au hasard de la liste
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">la liste à filtrer</param>
            <param name="random">le seed pour la randomisation (optionnel)</param>
        </member>
        <member name="T:PRF.Utils.CoreComponents.Extensions.MathExt">
            <summary>
            Le module MathExt regroupe les méthodes statique lié à quelques fonctions mathématiques
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.MathExt.Max``1(``0,``0)">
            <summary>
            Donne le plus grand item entre deux valeurs implémentant IComparable
            </summary>
            <param name="item1">la première valeur</param>
            <param name="item2">la seconde valeur</param>
            <typeparam name="T">le type des deux valeurs</typeparam>
            <returns>la valeur la plus grande (défini par IComparable)</returns>
            <see cref="T:System.IComparable"/>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.MathExt.Min``1(``0,``0)">
            <summary>
            Donne le plus petit item entre deux valeurs implémentant IComparable
            </summary>
            <param name="item1">la première valeur</param>
            <param name="item2">la seconde valeur</param>
            <typeparam name="T">le type des deux valeurs</typeparam>
            <returns>la valeur la plus petite (défini par IComparable)</returns>
            <see cref="T:System.IComparable"/>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.MathExt.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Implémentation typé pour les doubles: S'assure que le nombre demandé est situé entre min et max et limite sa valeur sinon
            </summary>
            <param name="val">la valeur</param>
            <param name="min">la valeur minimal admise (incluse) </param>
            <param name="max">la valeur maximal admise (incluse)</param>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.MathExt.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Implémentation typé pour les int: S'assure que le nombre demandé est situé entre min et max et limite sa valeur sinon
            </summary>
            <param name="val">la valeur</param>
            <param name="min">la valeur minimal admise (incluse) </param>
            <param name="max">la valeur maximal admise (incluse)</param>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.MathExt.Clamp``1(``0,``0,``0)">
            <summary>
            S'assure que le type demandé est situé entre min et max et limite sa valeur sinon
            </summary>
            <param name="val">la valeur</param>
            <param name="min">la valeur minimal admise (incluse) </param>
            <param name="max">la valeur maximal admise (incluse)</param>
        </member>
        <member name="T:PRF.Utils.CoreComponents.Extensions.PathExtension">
            <summary>
            Les méthodes d'extensions lié au 'Path'
            </summary>
        </member>
        <member name="P:PRF.Utils.CoreComponents.Extensions.PathExtension.MaxPathLenght">
            <summary>
            La longueur maximal d'un path sur ce système
            </summary>
        </member>
        <member name="T:PRF.Utils.CoreComponents.Extensions.RandomExtensions">
            <summary>
            Extension de la classe Random
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.RandomExtensions.NextBoolean(System.Random)">
            <summary>
            Renvoie true ou false au hasard
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.RandomExtensions.NextNumberBetweenOneAndLessOne(System.Random)">
            <summary>
            Génère une valeur aléatoire entre -1 et 1
            </summary>
        </member>
        <member name="T:PRF.Utils.CoreComponents.Extensions.StringExtensions">
            <summary>
            Les méthodes d'extensions lié au type 'string'
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.StringExtensions.ReplaceCaseInsensitive(System.String,System.String,System.String)">
            <summary>
            Fait un replace sans tenir compte de la casse
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.StringExtensions.GetBetween(System.String,System.String,System.String)">
            <summary>
            Renvoie la string contenue entre la première partie et la seconde partie
            </summary>
            <param name="s">la string à examiner</param>
            <param name="firstPart">la première partie</param>
            <param name="secondPart">la seconde partie</param>
            <returns>la string contenue entre la première partie et la seconde partie</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.StringExtensions.GetRelativePath(System.String,System.String)">
            <summary>
            Récupère un chemin relatif en supprimant la partie 'pathToRemove' mais en conservant les sous-dossiers qui suivent
            Marche avec ou sans le '\' à la fin de beforeRelativePath
            </summary>
            <param name="filefullName">le chemin complet du fichier fichier</param>
            <param name="pathToRemove">le chemin à supprimer</param>
            <returns>le chemin relatif restant</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.StringExtensions.RemoveEmptyLines(System.String)">
            <summary>
            Supprime les lignes vides (ou seulement occupé par des espaces)
            </summary>
            <param name="str">la string dont on souhaite supprimer les lignes vides</param>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.StringExtensions.RemoveInvalidPathCharacters(System.String)">
            <summary>
            Supprime les symboles incompatibles avec un nom de fichier
            </summary>
            <param name="str">la string dont on souhaite supprimer les symboles incompatibles avec un nom de fichier</param>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.StringExtensions.ToQuotedPath(System.String)">
            <summary>
            Retourne la string entre double quote
            </summary>
        </member>
        <member name="T:PRF.Utils.CoreComponents.Extensions.TypeExtensions">
            <summary>
            Extensions de 'Type'. Permet entre autre de simplifier certaines opération
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Renvoie true si le type est Nullable, false sinon
            </summary>
            <param name="type">le type concerné</param>
            <returns>true si le typee est Nullable, false sinon</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.TypeExtensions.GetPublicProperties(System.Type)">
            <summary>
            Renvoie la liste des propriétés publiques du type et des types parents du type demandé (utile dans le cas d'un interface pour 
            connaitres propriétés des interfaces parents)
            </summary>
            <param name="type">le type dont on souhaite conaitre la hiérarchie de propriété</param>
            <returns>la liste des propriétés publiques</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.TypeExtensions.IsSubclassOfRawGeneric(System.Type,System.Type)">
            <summary>
            Indique si le type est dérivé d'une classe générique de base (et uniquement d'une classe)
            </summary>
            <param name="currentType">le type source dont on souhaite savoir s'il est dérivable d'un type générique</param>
            <param name="genericType">le type générique cible</param>
            <returns>true si le type source dérive du type générique cible</returns>
        </member>
        <member name="T:PRF.Utils.CoreComponents.Extensions.ZipFileExtension">
            <summary>
            Méthodes d'extensions des archives .Net
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.ZipFileExtension.CreateFileEntryFromString(System.IO.Compression.ZipArchive,System.String,System.String,System.IO.Compression.CompressionLevel,System.Text.Encoding)">
            <summary>
            Créer un fichier directement au sein d'un zip à partir d'une chaîne de caractères
            </summary>
            <param name="zipArchive">l'archive concernée</param>
            <param name="relativePathInArchive">le chemin relatif du fichier (avec le nom et l'extension)</param>
            <param name="fileContent">le contenu du fichier à ajouter</param>
            <param name="compressionLevel">le niveau de compression (optimal par défaut)</param>
            <param name="encoding">l'encodage du fichier (UTF8 par défaut)</param>
        </member>
        <member name="M:PRF.Utils.CoreComponents.Extensions.ZipFileExtension.CreateFileEntryFromByteArray(System.IO.Compression.ZipArchive,System.String,System.Byte[],System.IO.Compression.CompressionLevel)">
            <summary>
            Créer un fichier directement au sein d'un zip à partir d'une chaîne de caractères
            </summary>
            <param name="zipArchive">l'archive concernée</param>
            <param name="relativePathInArchive">le chemin relatif du fichier (avec le nom et l'extension)</param>
            <param name="fileContent">le contenu du fichier à ajouter sous forme de bytes</param>
            <param name="compressionLevel">le niveau de compression (optimal par défaut)</param>
        </member>
        <member name="T:PRF.Utils.CoreComponents.XML.XmlSerializerWrapper">
            <summary>
            Gestionnaire de sérialization et désérialization
            </summary>
        </member>
        <member name="M:PRF.Utils.CoreComponents.XML.XmlSerializerWrapper.DeserializeAsync``1(System.IO.FileInfo)">
            <summary>
            Désérialise en asynchrone un fichier xml
            </summary>
            <typeparam name="T">le type d'objet à renvoyer</typeparam>
            <param name="file">le fichier xml à désérialiser</param>
            <returns>la Task générant l'objet désérialisé</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.XML.XmlSerializerWrapper.SerializeAsync``1(System.IO.FileInfo,``0)">
            <summary>
            Sérialise en asynchrone un objet en xml
            </summary>
            <typeparam name="T">le type de l'objet à sérialiser</typeparam>
            <param name="file">le fichier xml cible</param>
            <param name="data">l'objet à sérialiser</param>
            <returns>la Task représentant la fin de la tache</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.XML.XmlSerializerWrapper.Deserialize``1(System.String)">
            <summary>
            Désérialise en synchrone un string
            </summary>
            <typeparam name="T">le type d'objet à renvoyer</typeparam>
            <param name="xmlString">la string à désérialiser (le contenu d'un fichier xml par exemple)</param>
            <returns>L'objet désérialisé</returns>
        </member>
        <member name="M:PRF.Utils.CoreComponents.XML.XmlSerializerWrapper.Serialize``1(``0)">
            <summary>
            Sérialise en synchrone un objet en xml
            </summary>
            <typeparam name="T">le type d'objet à sérialiser</typeparam>
            <param name="data">l'objet à sérialiser</param>
            <returns>la représentation en string de l'objet sérialisé</returns>
        </member>
    </members>
</doc>
