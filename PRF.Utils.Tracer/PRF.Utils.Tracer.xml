<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PRF.Utils.Tracer</name>
    </assembly>
    <members>
        <member name="T:PRF.Utils.Tracer.Configuration.TraceConfig">
            <summary>
            La classe de configuration du traceur
            </summary>
        </member>
        <member name="P:PRF.Utils.Tracer.Configuration.TraceConfig.TraceName">
            <summary>
            Le nom du traceur (exactement, celui du traceSource) sous lequel il sera sauvegardé 
            </summary>
            <remarks> 
            On propose un nom par défaut: cette décision de design pars du postulat que la simplicité d'utilisation des traces statiques, bien que
            moins puissantes que les traces ajoutées directement au traceSource seront bcq plus utilisées par les devs.
            En conséquence, avoir plusieurs traces sources (ce qui est une préconisation Microsoft) ne sera clairement pas clair
            puisqu'il y aura un mélange de traces statique et directe dans des TracesSources différents. En proposant un nom
            par défaut on regroupe les traceSource sous la même appelation
            </remarks>
        </member>
        <member name="P:PRF.Utils.Tracer.Configuration.TraceConfig.TraceBehavior">
            <summary>
            Le comportement du traceur vis à vis des appels statique à Trace.TraceInformation(..)
            </summary>
        </member>
        <member name="P:PRF.Utils.Tracer.Configuration.TraceConfig.TraceLevel">
            <summary>
            Le niveau de trace à partir duquel on décide de tracer (SourceLevels.Information par défaut)
            </summary>
        </member>
        <member name="P:PRF.Utils.Tracer.Configuration.TraceConfig.MaximumTimeForFlush">
            <summary>
            Le temps maximum entre deux flushs même si on n'atteint pas la taille de la page souhaité
            </summary>
        </member>
        <member name="P:PRF.Utils.Tracer.Configuration.TraceConfig.PageSize">
            <summary>
            La taille des blocs de traces qui sont remonté via l'évènement OnTracesSent. On videra le
            cache dès que ce nombre (ou le timer) est atteint
            </summary>
        </member>
        <member name="T:PRF.Utils.Tracer.Listener.Helpers.ListenerHelpers">
            <summary>
            Classe de méthodes utilitaire pour le Listener
            </summary>
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.Helpers.ListenerHelpers.GetExceptionArray(System.String)">
            <summary>
            renvoie une page avec seulement la trace de l'erreur
            </summary>
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.Helpers.ListenerHelpers.CheckEntryValuesAndThrowExceptionIfFailed(System.TimeSpan,System.Int32)">
            <summary>
            Vérifie les valeur d'entrée d'un Listener
            </summary>
            <param name="timeForFlush">le temps maximum de flush entre deux pages</param>
            <param name="poolingPageSize">la taille maximum d'une page</param>
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.Helpers.ListenerHelpers.ToTraceEventType(System.Diagnostics.SourceLevels)">
            <summary>
            Converti un niveau de source en type de traceEvent
            </summary>
        </member>
        <member name="T:PRF.Utils.Tracer.Listener.TraceListenerSync">
            <inheritdoc />
            <summary>
            Le listener de trace custom. C'est lui qui s'occupe de centraliser les traces et de renvoyer des pages
            de traces quand la page est pleine ou au bout d'un certain Timeout
            </summary>
        </member>
        <member name="F:PRF.Utils.Tracer.Listener.TraceListenerSync._maxTimeoutForFullBuffer">
            <summary>
            Temps maximum en cas de buffer plein avant de lancer une exception
            </summary>
        </member>
        <member name="E:PRF.Utils.Tracer.Listener.TraceListenerSync.OnTracesSent">
            <summary>
            L'évènement levé lors de l'envoie d'une page
            </summary>
        </member>
        <member name="P:PRF.Utils.Tracer.Listener.TraceListenerSync.DynamicFilter">
            <summary>
            Le niveau de traces filtré au niveau du listener. Cette approche permet de faire du filtrage
            dynamique même via les appels aux méthodes statiques Traces.TraceQqch(). Sinon, seul les appels
            via le TraceSource sont filtrés.
            --------
            La conséquence c'est quand même qu'une vérification supplémentaire doit être faite = léger impact sur les perfs
            </summary>
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.TraceListenerSync.#ctor(System.TimeSpan,System.Int32)">
            <inheritdoc />
            <summary>
            Construit un traceur avec un temps de flush maximum et une taille de page
            </summary>
            <param name="timeForFlush">la plage maximum de temps à partir duquel on va vider la pile malgré tt</param>
            <param name="poolingPageSize">la taille des page émises par le traceur au maximum (elles peuvent être plus petites)</param>
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.TraceListenerSync.Write(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.TraceListenerSync.WriteLine(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.TraceListenerSync.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.TraceListenerSync.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.TraceListenerSync.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.TraceListenerSync.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.TraceListenerSync.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.TraceListenerSync.RaiseSentTraces(PRF.Utils.Tracer.Listener.Traces.TraceData[])">
            <summary>
            Lève l'évènement de trace
            </summary>
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.TraceListenerSync.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.TraceListenerSync.FlushAndCompleteAddingAsync">
            <summary>
            Cloture le buffer de traces et attends la fin de la tache de traces (via le async)
            </summary>
            <returns>la tache de traces en train de se cloturer</returns>
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.TraceListenerSync.RaiseException(System.Exception)">
            <summary>
            En cas d'exception, on trace un message vers l'extérieur pour signaler le problème
            </summary>
            <param name="e">l'exception</param>
        </member>
        <member name="T:PRF.Utils.Tracer.Listener.Traces.TraceAction">
            <summary>
            Lénumération des actions de traces pour le wrapper interne (rajouter une trace ou demander un flush de force)
            </summary>
        </member>
        <member name="T:PRF.Utils.Tracer.Listener.Traces.TraceData">
            <summary>
            Les données de traces dans le buffer (immutables)
            </summary>
        </member>
        <member name="P:PRF.Utils.Tracer.Listener.Traces.TraceData.EventType">
            <summary>
            Le niveau de la trace
            </summary>
        </member>
        <member name="P:PRF.Utils.Tracer.Listener.Traces.TraceData.Id">
            <summary>
            L'identifiant fourni par la source (idéalement un membre d'enum)
            </summary>
        </member>
        <member name="P:PRF.Utils.Tracer.Listener.Traces.TraceData.AdditionalData">
            <summary>
            Données additionelles éventuellement fournies par l'appelant (peut être null)
            </summary>
        </member>
        <member name="P:PRF.Utils.Tracer.Listener.Traces.TraceData.EventCache">
            <summary>
            Détail de la trace soit fourni par la méthode de trace (idéalement) soit créer à la volée lors de la trace (moins précis)
            </summary>
        </member>
        <member name="P:PRF.Utils.Tracer.Listener.Traces.TraceData.Message">
            <summary>
            Le message de la trace
            </summary>
        </member>
        <member name="P:PRF.Utils.Tracer.Listener.Traces.TraceData.Source">
            <summary>
            La source de la trace
            </summary>
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.Traces.TraceData.#ctor(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Constructeur détaillé
            </summary>
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.Traces.TraceWrapper.#ctor">
            <summary>
            créer un TraceWrapper qui demande de forcer le flush des traces
            </summary>
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.Traces.TraceWrapper.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Créer un TraceWrapper de trace quand on dispose seulement du message
            </summary>
        </member>
        <member name="M:PRF.Utils.Tracer.Listener.Traces.TraceWrapper.#ctor(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
            <summary>
            Créer un TraceWrapper de trace quand on dispose des informations détaillées
            </summary>
        </member>
        <member name="T:PRF.Utils.Tracer.TraceSourceSync">
            <inheritdoc cref="T:System.Diagnostics.TraceSource" />
            <summary>
            L'implémentation d'un trace source utilisant un TraceListenerSync. Cet objet est un traceSource uniquement
            pour les cas où l'on décide de l'injecter et de manipuler directement
            </summary>
        </member>
        <member name="E:PRF.Utils.Tracer.TraceSourceSync.OnTracesSent">
            <summary>
            L'évènement levé lorsqu'une page de trace à été constituée
            </summary>
        </member>
        <member name="P:PRF.Utils.Tracer.TraceSourceSync.TraceLevel">
            <summary>
            Le niveau de trace à partir duquel on trace
            </summary>
        </member>
        <member name="M:PRF.Utils.Tracer.TraceSourceSync.#ctor">
            <inheritdoc />
            <summary>
            Construit un traceur avec la configuration par défaut (TraceConfig)
            </summary>
        </member>
        <member name="M:PRF.Utils.Tracer.TraceSourceSync.#ctor(PRF.Utils.Tracer.Configuration.TraceConfig)">
            <inheritdoc />
            <summary>
            Construit un traceur avec une configuration fournie par l'utilisateur
            </summary>
            <param name="traceConfig">la configuration du traceur</param>
        </member>
        <member name="M:PRF.Utils.Tracer.TraceSourceSync.UpdateTraceSourceAndDynamicFilter(System.Diagnostics.SourceLevels)">
            <summary>
            Met à jour le switch du trace Source mais également celui du listener (qui est dynamique pour pouvoir switcher de niveau
            même sur les appels statiques à Trace.qqch)
            </summary>
        </member>
        <member name="M:PRF.Utils.Tracer.TraceSourceSync.FlushAndCompleteAddingAsync">
            <summary>
            Met toutes les traces dans le buffer et vide ce dernier tout en cloturant le listener: IL NE PEUT
            PLUS RECEVOIR DE NOUVELLES TRACES. La méthode attends la cloture du buffer pour revenir (d'où le async)
            </summary>
        </member>
        <member name="M:PRF.Utils.Tracer.TraceSourceSync.Dispose">
            <inheritdoc />
        </member>
        <member name="T:PRF.Utils.Tracer.TraceStaticBehavior">
            <summary>
            Le comportement du traceur par rapport aux traces statiques: => Trace.TraceInformation("...") etc...
            </summary>
        </member>
        <member name="F:PRF.Utils.Tracer.TraceStaticBehavior.DoNothing">
            <summary>
             valeur par défaut: le traceSource créer simplement un Listener et l'ajoute dans SA liste de listeners
            </summary>
        </member>
        <member name="F:PRF.Utils.Tracer.TraceStaticBehavior.AddListenerToStaticAcces">
            <summary>
            Ajoute le Listener de traces à l'accès statique Trace.Listener (il sera donc appelé pour chaque appel statique Trace.Traceqqch..)
            </summary>
        </member>
        <member name="F:PRF.Utils.Tracer.TraceStaticBehavior.AddListenerToStaticAccessAndRemoveDefaultTracer">
            <summary>
            Ajoute le Listener de traces à l'accès statique Trace.Listener
            et efface préalablement le listener par défaut si il est présent
            => peut être bcq plus performant mais empêche les remontées d'infos via l'output Visual Studio en debug par exemple
            </summary>
        </member>
        <member name="F:PRF.Utils.Tracer.TraceStaticBehavior.AddListenerToStaticAccessAndClearAll">
            <summary>
            Ajoute le Listener de traces à l'accès statique Trace.Listener
            et efface préalablement tous les listeners présents (performances maximum)
            => peut être bcq plus performant mais empêche les remontées d'infos via l'output Visual Studio en debug par exemple
            </summary>
        </member>
    </members>
</doc>
