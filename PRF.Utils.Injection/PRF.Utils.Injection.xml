<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PRF.Utils.Injection</name>
    </assembly>
    <members>
        <member name="T:PRF.Utils.Injection.BootStrappers.IBootstrapperCore">
            <summary>
            Représente l'interface définissant un BootStrapper: il s'agit d'une classe qui va enregistrer dans le container d'injection 
            toute la configuration d'un module (la gestion d'erreur, un bloc de services, etc...). Ce mécanisme permet d'injecter ensuite les dépendances 
            dont un composant a besoin en n'utilisant que le strict nécessaire au moment où c'est strictement nécessaire (lazy loading).
            </summary>
        </member>
        <member name="M:PRF.Utils.Injection.BootStrappers.IBootstrapperCore.Register(PRF.Utils.Injection.Containers.IInjectionContainerRegister)">
             <summary>
             La phase de pré-initialisation permet d'enregistrer dans la conteneur les classes du module. 
             Il ne faut pas en résoudre (voir RAPPEL Initialize). Tous les composants non négligeables doivent être enregistré
              avec une politique de durée de vie.
             </summary> 
            <param name="container">le container d'injection (en mode enregistrement seulement)</param>
             <see cref="M:PRF.Utils.Injection.BootStrappers.IBootstrapperCore.Initialize(PRF.Utils.Injection.Containers.IInjectionContainer)"/>
        </member>
        <member name="M:PRF.Utils.Injection.BootStrappers.IBootstrapperCore.Initialize(PRF.Utils.Injection.Containers.IInjectionContainer)">
            <summary>
            Resout les modules qui doivent l'être explicitement. Inutile de le faire si la résolution est faite par dépendance. Par contre, 
            pour des objet indépendants (superviseur, timers, Assistants..) on peut les résoudre ici.
            
             RAPPEL: la résolution explicite (c'est à dire l'appel à une commande Resolve) est une opération exceptionnelle
            qui ne doit concerner QUE les composants totalements indépendants (un récepteur de communication WCF par exemple) ou la racine 
            du programme (qui doit déjà exister)
            </summary>
            <param name="container">le container d'injection</param>
        </member>
        <member name="M:PRF.Utils.Injection.BootStrappers.IBootstrapperCore.InitializeAsync(PRF.Utils.Injection.Containers.IInjectionContainer)">
            <summary>
            Permet de centraliser les résolutions asynchrones.
            </summary>
            <param name="container">le container d'injection</param>
        </member>
        <member name="T:PRF.Utils.Injection.BootStrappers.BootStrapperCore">
            <summary>
            Classe de base des bootstrapper. Donne une implémentation de base de toutes les méthodes sauf Register (qui est toujours utile)
            On peut également choisir de directement implémenter IBootstrapperCore si l'on ne souhaite pas ces implémentations de base
            </summary>
            <see cref="T:PRF.Utils.Injection.BootStrappers.IBootstrapperCore"/>
        </member>
        <member name="M:PRF.Utils.Injection.BootStrappers.BootStrapperCore.Register(PRF.Utils.Injection.Containers.IInjectionContainerRegister)">
            <inheritdoc/>
        </member>
        <member name="M:PRF.Utils.Injection.BootStrappers.BootStrapperCore.Initialize(PRF.Utils.Injection.Containers.IInjectionContainer)">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Injection.BootStrappers.BootStrapperCore.InitializeAsync(PRF.Utils.Injection.Containers.IInjectionContainer)">
            <inheritdoc />
        </member>
        <member name="T:PRF.Utils.Injection.Containers.IInjectionContainer">
            <summary>
            Réprésente un conteneur d'injection qui encapsule et masque la technique d'injection utilisée.
             Tout les composants principaux doivent être enregistrés dans ce conteneur.
            </summary>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainer.Resolve``1">
            <summary>
            Renvoie une instance du type demandé (qui doit préalablement avoir été enregistré dans le conteneur).
            </summary>
            <typeparam name="TInterface">le type demandé </typeparam>
            <returns>une instance (unique ou non en fonction de l'enregistrement) du type demandé</returns>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainer.Resolve``1(System.Type)">
            <summary>
            Renvoie une instance du type demandé (qui doit préalablement avoir été enregistré dans le conteneur).
            </summary>
            <typeparam name="T">le type demandé </typeparam>
            <returns>une instance (unique ou non en fonction de l'enregistrement) du type demandé</returns>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainer.Resolve(System.Type)">
            <summary>
            Renvoie une instance non typée du type demandé (qui doit préalablement avoir été enregistré dans le conteneur).
            A limiter que dans les cas exceptionnels (imposés par le framework ou des cas très particuliers), et lui préférer les signatures génériques
            </summary>
            <returns>une instance (unique ou non en fonction de l'enregistrement) du type demandé</returns>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainer.ResolveAll``1">
            <summary>
            Résout tous les types enegistrés implementant l'interface fourni
            </summary>
            <typeparam name="T">Type de L'interface</typeparam>
            <returns>Liste des Instances concretes</returns>
        </member>
        <member name="T:PRF.Utils.Injection.Containers.IInjectionContainerRegister">
            <summary>
            Représente un conteneur d'injection où l'on ne peut qu'enregistrer des commandes (utile pour la phase de pré-initialisation "Register")
            </summary>
        </member>
        <member name="E:PRF.Utils.Injection.Containers.IInjectionContainerRegister.ResolveUnregisteredType">
            <summary>
            Evènement levé lors d'une résolution de type non enregistré
            </summary>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainerRegister.Register``2(PRF.Utils.Injection.Utils.LifeTime)">
            <summary>
            Enregistre un type dans le conteneur d'injection. On utilisera très préférentiellement un interface plutôt qu'une classe pour
            masquer le type concret créé par le conteneur (implique beaucoup d'avantage dans l'architecture d'un projet,
            il faut essayer de s'y tenir). 
            </summary>
            <param name="lifetime">la durée de vie souhaité pour ce type</param>
            <typeparam name="TInterface">le type de l'interface (préférable) sous lequel sera enregistré le type concret</typeparam>
            <typeparam name="TClass">le type concret</typeparam>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainerRegister.RegisterWithInitializer``2(PRF.Utils.Injection.Utils.LifeTime,System.Action{``1})">
            <summary>
            Enregistre un type dans le conteneur d'injection avec une méthode d'initialisation
            </summary>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainerRegister.RegisterWithInitializer``3(PRF.Utils.Injection.Utils.LifeTime,System.Action{``2})">
            <summary>
            Enregistre un type dans le conteneur d'injection avec une méthode d'initialisation
            </summary>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainerRegister.RegisterInterceptor``1(PRF.Utils.Injection.Utils.LifeTime)">
            <summary>
            Enregistre un intercepteur dans le container. Il est également possible d'utiliser directement un container.Register
            </summary>
            <typeparam name="T">le type de l'intercepteur</typeparam>
            <param name="lifetime">le comportement du container lors d'une demande d'un intercepteur (transient Vs Singleton)</param>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainerRegister.RegisterInterceptor(PRF.Utils.Injection.Utils.PredefinedInterceptors,PRF.Utils.Injection.Utils.LifeTime)">
            <summary>
            Enregistre un intercepteur pré-défini dans le container
            </summary>
            <param name="predefinedInterceptor">le type de l'intercepteur prédéfini</param>
            <param name="lifetime">le comportement du container lors d'une demande d'un intercepteur (transient Vs Singleton)</param>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainerRegister.Intercept``1">
            <summary>
            Intercepte le type demandé
            </summary>
            <typeparam name="T">le type à intercepter</typeparam>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainerRegister.InterceptAny(System.Func{System.Type,System.Boolean})">
            <summary>
            Intercepte  en fonction d'une lambda
            </summary>
            <param name="predicate"> le prédicat pour permettre d'intercepter dans différentes situations</param>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainerRegister.Register``3(PRF.Utils.Injection.Utils.LifeTime)">
            <summary>
            Enregistre un type dans le conteneur d'injection derrière plusieurs interfaces (la résolution de l'un ou de l'autre renvoie le même type). 
            </summary>
            <param name="lifetime">la durée de vie souhaité pour ce type</param>
            <typeparam name="TInterface1">le premier type de l'interface sous lequel sera enregistré le type concret</typeparam>
            <typeparam name="TInterface2">le type de l'interface (préférable) sous lequel sera enregistré le type concret</typeparam>
            <typeparam name="TClass">le type concret</typeparam>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainerRegister.RegisterType``1(PRF.Utils.Injection.Utils.LifeTime)">
            <summary>
            Enregistre un type dans le conteneur d'injection.
            </summary>
            <param name="lifetime">la durée de vie souhaité pour ce type</param>
            <typeparam name="TClass">le type concret</typeparam>
            <remarks> On utilisera très préférentiellement un interface plutôt qu'une classe pour masquer le type concret créé 
            par le conteneur (implique beaucoup d'avantage dans l'architecture d'un projet, il faut essayer de s'y tenir)</remarks>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainerRegister.RegisterSingleton``1(System.Func{``0})">
            <summary>
            Enregistre un type comme singleton dans le conteneur d'injection avec une fonction de création du type personnalisée
            </summary>
            /// <param name="instancecreator">Fonction retournant l'instance du type demandé</param>
            <typeparam name="TClass">le type concret</typeparam>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainerRegister.RegisterInstance``1(``0)">
            <summary>
            Enregistre une instance dans le conteneur d'injection en tant que Singleton.
            </summary>
            <typeparam name="TInterface">l'interface du type souhaité pour l'enregistrement</typeparam>
            <param name="instance">l'instance à enregistrer</param>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainerRegister.RegisterSimulation``2(PRF.Utils.Injection.Utils.LifeTime)">
            <summary>
            Enregistre le décorateur de simulation
            </summary>
            <typeparam name="TDecorator"> le type du décorateur</typeparam>
            <typeparam name="TInterface"> le type simulé par le décorateur</typeparam>
            <param name="lifetime">la durée de vie souhaité pour ce décorateur </param>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainerRegister.RegisterCollection``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Permet l'enregistrement d'un collection de types implémentant tous le même Type de base
            </summary>
            <param name="typesList">Liste des types</param>
            <typeparam name="T">Type de base derrière lequel les autres types seront enregistrés</typeparam>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainerRegister.RegisterCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Permet l'enregistrement d'un collection de types implémentant tous le même Type de base
            </summary>
            <param name="instanceList">Liste des instances</param>
            <typeparam name="T">Type de base derrière lequel les autres types seront enregistrés</typeparam>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.IInjectionContainerRegister.GetRegistrableContainer">
            <summary>
            Renvoie le container d'enregistrement. RECUPERER LE CONTENEUR D'ENREGISTREMENT LORS DES REGISTER NE DOIT ETRE FAIT QUE
            DANS DES CAS BIEN SPECIFIQUE (enregistrement d'une factory par exemple)
            </summary>
            <returns>le container d'enregistrement</returns>
        </member>
        <member name="T:PRF.Utils.Injection.Containers.InjectionContainer">
            <inheritdoc cref="T:PRF.Utils.Injection.Containers.IInjectionContainer"/>
        </member>
        <member name="F:PRF.Utils.Injection.Containers.InjectionContainer._convertLifestyles">
            <summary>
            Dictionnaire de conversion entre un LifeTime externe et l'implémentation SimpleInjector
            </summary>
        </member>
        <member name="F:PRF.Utils.Injection.Containers.InjectionContainer._internalContainer">
            <summary>
            Le conteneur d'injection interne utilisé (dans notre cas, un conteneur SimpleInjector)
            </summary>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.#ctor">
            <summary>
            Constructeur du conteneur d'injection. Il va s'enregistrer lui même.
            </summary>
        </member>
        <member name="E:PRF.Utils.Injection.Containers.InjectionContainer.ResolveUnregisteredType">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.Register``2(PRF.Utils.Injection.Utils.LifeTime)">
            <inheritdoc/>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.RegisterWithInitializer``2(PRF.Utils.Injection.Utils.LifeTime,System.Action{``1})">
            <inheritdoc/>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.RegisterInterceptor``1(PRF.Utils.Injection.Utils.LifeTime)">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.RegisterInterceptor(PRF.Utils.Injection.Utils.PredefinedInterceptors,PRF.Utils.Injection.Utils.LifeTime)">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.Intercept``1">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.InterceptAny(System.Func{System.Type,System.Boolean})">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.RegisterWithInitializer``3(PRF.Utils.Injection.Utils.LifeTime,System.Action{``2})">
            <inheritdoc/>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.Register``3(PRF.Utils.Injection.Utils.LifeTime)">
            <inheritdoc/>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.RegisterType``1(PRF.Utils.Injection.Utils.LifeTime)">
            <inheritdoc/>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.RegisterSingleton``1(System.Func{``0})">
            <inheritdoc/>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.RegisterInstance``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.RegisterSimulation``2(PRF.Utils.Injection.Utils.LifeTime)">
            <inheritdoc/>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.RegisterCollection``1(System.Collections.Generic.IEnumerable{System.Type})">
            <inheritdoc/>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.RegisterCollection``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc/>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.GetRegistrableContainer">
            <inheritdoc/>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.Resolve``1">
            <inheritdoc/>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.Resolve``1(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.Resolve(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.ResolveAll``1">
            <inheritdoc/>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.Verify">
            <summary>
            La vérification consiste à résoudre tous les types enregistrés de façon à vérifier qu'il n'existe pas de références circulaires non détectées
            dans le container SimpleInjector.
            </summary>
            <remarks>Cette méthode n'est pas exposé depuis les interfaces car elle n'est pas proposé aux consommateurs (les bootstrappers)</remarks>
            <returns>Renvoie le diagnostique des Erreurs et Warning sil y en a</returns>
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.Dispose">
            <inheritdoc />
        </member>
        <member name="T:PRF.Utils.Injection.Containers.InjectionContainer.InterceptorFluentBindingDefinitionLambda">
            <inheritdoc />
        </member>
        <member name="T:PRF.Utils.Injection.Containers.InjectionContainer.InterceptorFluentBindingDefinition">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Injection.Containers.InjectionContainer.InterceptorFluentBindingDefinition.#ctor(SimpleInjector.Container,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:PRF.Utils.Injection.Interception.Helpers.InterceptionExtensions">
            <summary>
            Propose une façon d'intercepter des types de façon plus claire
            </summary>
        </member>
        <member name="T:PRF.Utils.Injection.Interception.Helpers.InterceptorAsyncHelpers">
            <summary>
            Classe d'aide à la manipulation de méthodes asynchrones dans les intercepteurs.
            Cette classe permet de créer des encapsulations génériques de taches
            </summary>
        </member>
        <member name="M:PRF.Utils.Injection.Interception.Helpers.InterceptorAsyncHelpers.InterceptAsync(System.Threading.Tasks.Task,Castle.DynamicProxy.IInvocation,System.Action,System.Action{System.Object})">
            <summary>
            Permet d'encaspuler une tache non générique OU générique
            et de rajouter une action post await pour chaque cas (comme une trace de fin par exemple)
            </summary>
        </member>
        <member name="M:PRF.Utils.Injection.Interception.Helpers.InterceptorAsyncHelpers.InterceptAsync(System.Threading.Tasks.Task,System.Action)">
            <summary>
            Permet d'encaspuler une tache non générique et de rajouter une action post await
            (comme une trace de fin par exemple)
            </summary>
        </member>
        <member name="M:PRF.Utils.Injection.Interception.Helpers.InterceptorAsyncHelpers.InterceptWithResultAsync(System.Threading.Tasks.Task,System.Object,System.Action{System.Object})">
            <summary>
            Permet d'encaspuler une tache non générique et de rajouter une action post await
            (comme une trace de fin par exemple)
            </summary>
        </member>
        <member name="M:PRF.Utils.Injection.Interception.Helpers.InterceptorAsyncHelpers.GetTaskGenericWrapper(System.Type)">
            <summary>
            Récupère ou crée s'il n'existe pas déjà un délégué wrappant une tache générique
            et rajoutant une action post await
            </summary>
            <param name="taskType">le type de la tache (Task[int] par exemple)</param>
            <returns>la fonction de création du wrapper</returns>
        </member>
        <member name="T:PRF.Utils.Injection.Interception.InterceptionExtensions.CustomHook.HookMethodsAndSetProperties">
            <inheritdoc />
            <summary>
            Intercepte les méthodes mais pas les propriétés
            </summary>
        </member>
        <member name="T:PRF.Utils.Injection.Interception.InterceptionExtensions.CustomHook.HookMethodsButNoProperties">
            <inheritdoc />
            <summary>
            Intercepte les méthodes mais pas les propriétés
            </summary>
        </member>
        <member name="T:PRF.Utils.Injection.Interception.InterceptionExtensions.CustomHook.HookWithInterceptionAttribute">
            <inheritdoc />
            <summary>
            Intercepte les méthodes et les propriétés possédant un attribut InterceptionAttribute
            </summary>
            <seealso cref="T:PRF.Utils.Injection.Utils.InterceptionAttribute" />
        </member>
        <member name="T:PRF.Utils.Injection.Interception.InterceptionExtensions.InterceptorFluentBindingDefinitionBase">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Injection.Interception.InterceptionExtensions.InterceptorFluentBindingDefinitionBase.#ctor(SimpleInjector.Container,System.Func{System.Type,System.Boolean})">
            <summary>
            Constructeur avec prédicat
            </summary>
        </member>
        <member name="M:PRF.Utils.Injection.Interception.InterceptionExtensions.InterceptorFluentBindingDefinitionBase.With(PRF.Utils.Injection.Utils.PredefinedInterceptors,PRF.Utils.Injection.Utils.InterceptionHookOption)">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Injection.Interception.InterceptionExtensions.InterceptorFluentBindingDefinitionBase.With``1(PRF.Utils.Injection.Utils.InterceptionHookOption)">
            <inheritdoc />
        </member>
        <member name="M:PRF.Utils.Injection.Interception.InterceptionExtensions.Interceptor.CreateProxy(System.Type,Castle.DynamicProxy.IInterceptor,System.Object,Castle.DynamicProxy.ProxyGenerationOptions)">
            <summary>
            Méthode de création d'un proxy
            </summary>
        </member>
        <member name="T:PRF.Utils.Injection.Interception.Interceptors.MethodTraceInterceptor">
            <inheritdoc />
            <summary>
            Intercepteur qui trace les entrées et les sorties d'une méthode
            Il est un peu plus compliqué car il intercepte également les méthodes asynchrones
            </summary>
        </member>
        <member name="M:PRF.Utils.Injection.Interception.Interceptors.MethodTraceInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <inheritdoc />
        </member>
        <member name="T:PRF.Utils.Injection.Interception.Interceptors.TimeWatchInterceptor">
            <inheritdoc />
            <summary>
            Intercepteur qui trace le temps passé dans une méthode
            </summary>
        </member>
        <member name="M:PRF.Utils.Injection.Interception.Interceptors.TimeWatchInterceptor.Intercept(Castle.DynamicProxy.IInvocation)">
            <inheritdoc />
        </member>
        <member name="T:PRF.Utils.Injection.Utils.InterceptionHookOption">
            <summary>
            Les différents type d'interception disponible pour un interface
            </summary>
        </member>
        <member name="F:PRF.Utils.Injection.Utils.InterceptionHookOption.MethodsAndSetProperties">
            <summary>
            Intercepte toute les méthodes et les setter des propriétés d'un interface
            </summary>
        </member>
        <member name="F:PRF.Utils.Injection.Utils.InterceptionHookOption.MethodsOnly">
            <summary>
            Intercepte les méthodes seulement mais pas les propriétés d'un interface
            </summary>
        </member>
        <member name="F:PRF.Utils.Injection.Utils.InterceptionHookOption.InterceptionAttributOnly">
            <summary>
            Intercepte les méthodes et propriétés (Get ou Set)
            d'un interface ayant un InterceptionAttribute
            </summary>
            <seealso cref="T:PRF.Utils.Injection.Utils.InterceptionAttribute"/>
            <remarks>Attention, les attributs d'interceptions ne fonctionnent
            que sur les interfaces</remarks>
        </member>
        <member name="T:PRF.Utils.Injection.Utils.IInterceptorFluentBindingDefinition">
            <summary>
            Permet de lier un type à intercepter avec un intercepteur
            </summary>
        </member>
        <member name="M:PRF.Utils.Injection.Utils.IInterceptorFluentBindingDefinition.With(PRF.Utils.Injection.Utils.PredefinedInterceptors,PRF.Utils.Injection.Utils.InterceptionHookOption)">
            <summary>
            L'intercepteur à appliquer au type intercepter
            </summary>
        </member>
        <member name="M:PRF.Utils.Injection.Utils.IInterceptorFluentBindingDefinition.With``1(PRF.Utils.Injection.Utils.InterceptionHookOption)">
            <summary>
            L'intercepteur à appliquer au type intercepter
            </summary>
        </member>
        <member name="T:PRF.Utils.Injection.Utils.InterceptionAttribute">
            <inheritdoc />
            <summary>
            Attribut d'interception indiquant que l'on souhaite intercepter cette méthode ou propriété. 
            CET ATTRIBUT DOIT ETRE PLACE SUR L'INTERFACE
            </summary>
            <remarks>Pour l'interception de propriétés il faut mettre les attributs
            sur le get ET sur le set indépendamment en fonction des besoins</remarks>
        </member>
        <member name="T:PRF.Utils.Injection.Utils.LifeTime">
            <summary>
            Les différents types de durée de vie possibles pour les enregistrements d'une classe dans le conteneur d'injection
            </summary>
        </member>
        <member name="F:PRF.Utils.Injection.Utils.LifeTime.Singleton">
            <summary>
            La classe sera crée sous forme de singleton et la même instance sera renvoyé à chaque demande par le conteneur (comportement le plus courant)
            </summary>
        </member>
        <member name="F:PRF.Utils.Injection.Utils.LifeTime.Transient">
            <summary>
            le conteneur renverra une nouvelle instance de la classe à chaque demande faite par le consommateur
            </summary>
        </member>
        <member name="T:PRF.Utils.Injection.Utils.PredefinedInterceptors">
            <summary>
            La liste de tous les intercepteurs pré-configurés car d'usage classique. Il est possible de définir un intercepteur custom en
            surchargeant l'interface IInterceptor
            </summary>
        </member>
        <member name="F:PRF.Utils.Injection.Utils.PredefinedInterceptors.MethodTraceInterceptor">
            <summary>
            Intercepteur qui trace le début et la fin de chaque méthode interceptée et fait un ToString sur les paramètres de cette méthode
            </summary>
        </member>
        <member name="F:PRF.Utils.Injection.Utils.PredefinedInterceptors.TimeWatchInterceptor">
            <summary>
            Intercepteur qui trace le temps passé dans chaque méthode interceptée
            </summary>
        </member>
    </members>
</doc>
